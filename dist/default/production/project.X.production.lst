

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Aug 15 22:18:43 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    17  0000                     
    18                           ; Version 1.43
    19                           ; Generated 25/07/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  000284                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _duty_servo
    58  000284  000D               	dw	13
    59                           
    60                           ;initializer for _duty_motor
    61  000286  F230               	dw	62000
    62  0000                     _CCPR1	set	4030
    63  0000                     _TMR1	set	4046
    64  0000                     _TRISD	set	3989
    65  0000                     _TRISC	set	3988
    66  0000                     _PORTD	set	3971
    67  0000                     _PORTC	set	3970
    68  0000                     _ADCON0bits	set	4034
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON0	set	4034
    72  0000                     _CCP1CON	set	4029
    73  0000                     _T3CON	set	4017
    74  0000                     _T2CON	set	4042
    75  0000                     _T1CON	set	4045
    76  0000                     _OSCCON	set	4051
    77  0000                     _TMR2	set	4044
    78  0000                     _PR2	set	4043
    79  0000                     _PORTDbits	set	3971
    80  0000                     _TMR2ON	set	32338
    81  0000                     _TMR2IE	set	31977
    82  0000                     _CCP1IE	set	31978
    83  0000                     _TMR1IE	set	31976
    84  0000                     _PEIE	set	32662
    85  0000                     _GIE	set	32663
    86  0000                     _TMR2IF	set	31985
    87  0000                     _CCP1IF	set	31986
    88  0000                     _TMR1IF	set	31984
    89                           
    90                           ; #config settings
    91  0000                     
    92                           	psect	cinit
    93  000250                     __pcinit:
    94                           	opt stack 0
    95  000250                     start_initialization:
    96                           	opt stack 0
    97  000250                     __initialization:
    98                           	opt stack 0
    99                           
   100                           ; Initialize objects allocated to COMRAM (4 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  000250  0E84               	movlw	low __pidataCOMRAM
   103  000252  6EF6               	movwf	tblptrl,c
   104  000254  0E02               	movlw	high __pidataCOMRAM
   105  000256  6EF7               	movwf	tblptrh,c
   106  000258  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  00025A  6EF8               	movwf	tblptru,c
   108  00025C  EE00  F01A         	lfsr	0,__pdataCOMRAM
   109  000260  EE10 F004          	lfsr	1,4
   110  000264                     copy_data0:
   111  000264  0009               	tblrd		*+
   112  000266  CFF5 FFEE          	movff	tablat,postinc0
   113  00026A  50E5               	movf	postdec1,w,c
   114  00026C  50E1               	movf	fsr1l,w,c
   115  00026E  E1FA               	bnz	copy_data0
   116                           
   117                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   118  000270  6A15               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   119                           
   120                           ; Clear objects allocated to COMRAM (4 bytes)
   121  000272  6A19               	clrf	(__pbssCOMRAM+3)& (0+255),c
   122  000274  6A18               	clrf	(__pbssCOMRAM+2)& (0+255),c
   123  000276  6A17               	clrf	(__pbssCOMRAM+1)& (0+255),c
   124  000278  6A16               	clrf	__pbssCOMRAM& (0+255),c
   125  00027A                     end_of_initialization:
   126                           	opt stack 0
   127  00027A                     __end_of__initialization:
   128                           	opt stack 0
   129  00027A  901E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   130  00027C  921E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   131  00027E  0100               	movlb	0
   132  000280  EF09  F000         	goto	_main	;jump to C main() function
   133                           tblptru	equ	0xFF8
   134                           tblptrh	equ	0xFF7
   135                           tblptrl	equ	0xFF6
   136                           tablat	equ	0xFF5
   137                           postinc0	equ	0xFEE
   138                           postdec1	equ	0xFE5
   139                           fsr1l	equ	0xFE1
   140                           
   141                           	psect	bitbssCOMRAM
   142  0000A8                     __pbitbssCOMRAM:
   143                           	opt stack 0
   144  0000A8                     _flag_botao_servo2:
   145                           	opt stack 0
   146  0000A8                     	ds	1
   147  0000A9                     _flag_botao_servo1:
   148                           	opt stack 0
   149  0000A9                     	ds	1
   150  0000AA                     _flag_botao_motor2:
   151                           	opt stack 0
   152  0000AA                     	ds	1
   153  0000AB                     _flag_botao_motor1:
   154                           	opt stack 0
   155  0000AB                     	ds	1
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           tblptrl	equ	0xFF6
   159                           tablat	equ	0xFF5
   160                           postinc0	equ	0xFEE
   161                           postdec1	equ	0xFE5
   162                           fsr1l	equ	0xFE1
   163                           
   164                           	psect	bssCOMRAM
   165  000016                     __pbssCOMRAM:
   166                           	opt stack 0
   167  000016                     _rep_servo_cnt2:
   168                           	opt stack 0
   169  000016                     	ds	1
   170  000017                     _rep_servo_cnt1:
   171                           	opt stack 0
   172  000017                     	ds	1
   173  000018                     _rep_motor_cnt2:
   174                           	opt stack 0
   175  000018                     	ds	1
   176  000019                     _rep_motor_cnt1:
   177                           	opt stack 0
   178  000019                     	ds	1
   179                           tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           tblptrl	equ	0xFF6
   182                           tablat	equ	0xFF5
   183                           postinc0	equ	0xFEE
   184                           postdec1	equ	0xFE5
   185                           fsr1l	equ	0xFE1
   186                           
   187                           	psect	dataCOMRAM
   188  00001A                     __pdataCOMRAM:
   189                           	opt stack 0
   190  00001A                     _duty_servo:
   191                           	opt stack 0
   192  00001A                     	ds	2
   193  00001C                     _duty_motor:
   194                           	opt stack 0
   195  00001C                     	ds	2
   196                           tblptru	equ	0xFF8
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           postinc0	equ	0xFEE
   201                           postdec1	equ	0xFE5
   202                           fsr1l	equ	0xFE1
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt stack 0
   207  000001                     ??_isr:
   208  000001                     
   209                           ; 1 bytes @ 0x0
   210  000001                     	ds	19
   211  000014                     ??_main:
   212                           
   213                           ; 1 bytes @ 0x13
   214  000014                     	ds	1
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 118 in file "newmain.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;		None
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, status,2, status,0
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   242 ;;      Params:         0       0       0       0       0       0       0       0       0
   243 ;;      Locals:         0       0       0       0       0       0       0       0       0
   244 ;;      Temps:          1       0       0       0       0       0       0       0       0
   245 ;;      Totals:         1       0       0       0       0       0       0       0       0
   246 ;;Total ram usage:        1 bytes
   247 ;; Hardware stack levels required when called:    1
   248 ;; This function calls:
   249 ;;		Nothing
   250 ;; This function is called by:
   251 ;;		Startup code after reset
   252 ;; This function uses a non-reentrant model
   253 ;;
   254                           
   255                           	psect	text0
   256  000012                     __ptext0:
   257                           	opt stack 0
   258  000012                     _main:
   259                           	opt stack 30
   260                           
   261                           ;newmain.c: 119: OSCCON = 0b01100000;
   262                           
   263                           ;incstack = 0
   264  000012  0E60               	movlw	96
   265  000014  6ED3               	movwf	4051,c	;volatile
   266                           
   267                           ;newmain.c: 120: GIE = 1;
   268  000016  8EF2               	bsf	intcon,7,c	;volatile
   269                           
   270                           ;newmain.c: 121: PEIE = 1;
   271  000018  8CF2               	bsf	intcon,6,c	;volatile
   272                           
   273                           ;newmain.c: 122: T1CON = 0x01;
   274  00001A  0E01               	movlw	1
   275  00001C  6ECD               	movwf	4045,c	;volatile
   276                           
   277                           ;newmain.c: 123: T2CON = 0b01111101;
   278  00001E  0E7D               	movlw	125
   279  000020  6ECA               	movwf	4042,c	;volatile
   280                           
   281                           ;newmain.c: 124: T3CON = 0x00;
   282  000022  0E00               	movlw	0
   283  000024  6EB1               	movwf	4017,c	;volatile
   284                           
   285                           ;newmain.c: 125: TMR1 = 58000;
   286  000026  0EE2               	movlw	226
   287  000028  6ECF               	movwf	4047,c	;volatile
   288  00002A  0E90               	movlw	144
   289  00002C  6ECE               	movwf	4046,c	;volatile
   290                           
   291                           ;newmain.c: 126: CCP1CON = 0b00001010;
   292  00002E  0E0A               	movlw	10
   293  000030  6EBD               	movwf	4029,c	;volatile
   294                           
   295                           ;newmain.c: 127: CCPR1 = duty_motor;
   296  000032  C01C  FFBE         	movff	_duty_motor,4030	;volatile
   297  000036  C01D  FFBF         	movff	_duty_motor+1,4031	;volatile
   298                           
   299                           ;newmain.c: 128: TMR1IE = 1;
   300  00003A  809D               	bsf	3997,0,c	;volatile
   301                           
   302                           ;newmain.c: 129: CCP1IE = 1;
   303  00003C  849D               	bsf	3997,2,c	;volatile
   304                           
   305                           ;newmain.c: 130: TMR2IE = 1;
   306  00003E  829D               	bsf	3997,1,c	;volatile
   307                           
   308                           ;newmain.c: 131: ADCON0 = 0x80;
   309  000040  0E80               	movlw	128
   310  000042  6EC2               	movwf	4034,c	;volatile
   311                           
   312                           ;newmain.c: 132: ADCON1 = 0x8E;
   313  000044  0E8E               	movlw	142
   314  000046  6EC1               	movwf	4033,c	;volatile
   315                           
   316                           ;newmain.c: 133: ADCON2 = 0b10010110;
   317  000048  0E96               	movlw	150
   318  00004A  6EC0               	movwf	4032,c	;volatile
   319                           
   320                           ;newmain.c: 134: ADCON0bits.ADON = 1;
   321  00004C  80C2               	bsf	4034,0,c	;volatile
   322                           
   323                           ;newmain.c: 135: PORTC = 0x00;
   324  00004E  0E00               	movlw	0
   325  000050  6E82               	movwf	3970,c	;volatile
   326                           
   327                           ;newmain.c: 136: PORTD = 0x3C;
   328  000052  0E3C               	movlw	60
   329  000054  6E83               	movwf	3971,c	;volatile
   330                           
   331                           ;newmain.c: 137: TRISC = 0x00;
   332  000056  0E00               	movlw	0
   333  000058  6E94               	movwf	3988,c	;volatile
   334                           
   335                           ;newmain.c: 138: TRISD = 0x3C;
   336  00005A  0E3C               	movlw	60
   337  00005C  6E95               	movwf	3989,c	;volatile
   338                           
   339                           ;newmain.c: 139: TMR2ON = 1;
   340  00005E  84CA               	bsf	4042,2,c	;volatile
   341  000060                     
   342                           ;newmain.c: 142: _delay((unsigned long)((500)*(16000000/4000000.0)));
   343  000060  0E03               	movlw	3
   344  000062  6E14               	movwf	??_main& (0+255),c
   345  000064  0E98               	movlw	152
   346  000066                     u257:
   347  000066  2EE8               	decfsz	wreg,f,c
   348  000068  D7FE               	bra	u257
   349  00006A  2E14               	decfsz	??_main& (0+255),f,c
   350  00006C  D7FC               	bra	u257
   351                           
   352                           ;newmain.c: 145: CCPR1 = duty_motor;
   353  00006E  C01C  FFBE         	movff	_duty_motor,4030	;volatile
   354  000072  C01D  FFBF         	movff	_duty_motor+1,4031	;volatile
   355                           
   356                           ;newmain.c: 146: if(!PORTDbits.RD2){
   357  000076  B483               	btfsc	3971,2,c	;volatile
   358  000078  D004               	goto	l92
   359                           
   360                           ;newmain.c: 147: flag_botao_motor1 = 1; rep_motor_cnt1 = 0;
   361  00007A  8615               	bsf	_flag_botao_motor1/(0+8),_flag_botao_motor1& (0+7),c
   362  00007C  0E00               	movlw	0
   363  00007E  6E19               	movwf	_rep_motor_cnt1,c
   364                           
   365                           ;newmain.c: 148: } else rep_motor_cnt1++;
   366  000080  D001               	goto	l93
   367  000082                     l92:
   368  000082  2A19               	incf	_rep_motor_cnt1,f,c
   369  000084                     l93:
   370                           
   371                           ;newmain.c: 150: if(!PORTDbits.RD3){
   372  000084  B683               	btfsc	3971,3,c	;volatile
   373  000086  D004               	goto	l94
   374                           
   375                           ;newmain.c: 151: flag_botao_motor2 = 1; rep_motor_cnt2 = 0;
   376  000088  8415               	bsf	_flag_botao_motor2/(0+8),_flag_botao_motor2& (0+7),c
   377  00008A  0E00               	movlw	0
   378  00008C  6E18               	movwf	_rep_motor_cnt2,c
   379                           
   380                           ;newmain.c: 152: } else rep_motor_cnt2++;
   381  00008E  D001               	goto	l95
   382  000090                     l94:
   383  000090  2A18               	incf	_rep_motor_cnt2,f,c
   384  000092                     l95:
   385                           
   386                           ;newmain.c: 154: if (PORTDbits.RD2 && flag_botao_motor1) {
   387  000092  B483               	btfsc	3971,2,c	;volatile
   388  000094  A615               	btfss	_flag_botao_motor1/(0+8),_flag_botao_motor1& (0+7),c
   389  000096  D002               	goto	l96
   390                           
   391                           ;newmain.c: 155: flag_botao_motor1 = 0;
   392  000098  9615               	bcf	_flag_botao_motor1/(0+8),_flag_botao_motor1& (0+7),c
   393  00009A  D005               	goto	l818
   394  00009C                     l96:
   395  00009C  0E0A               	movlw	10
   396  00009E  6419               	cpfsgt	_rep_motor_cnt1,c
   397  0000A0  D008               	goto	l98
   398                           
   399                           ;newmain.c: 158: rep_motor_cnt1 = 0;
   400  0000A2  0E00               	movlw	0
   401  0000A4  6E19               	movwf	_rep_motor_cnt1,c
   402  0000A6                     l818:
   403                           
   404                           ;newmain.c: 159: duty_motor = duty_motor - 80;
   405  0000A6  0EB0               	movlw	176
   406  0000A8  241C               	addwf	_duty_motor,w,c
   407  0000AA  6E1C               	movwf	_duty_motor,c
   408  0000AC  0EFF               	movlw	255
   409  0000AE  201D               	addwfc	_duty_motor+1,w,c
   410  0000B0  6E1D               	movwf	_duty_motor+1,c
   411  0000B2                     l98:
   412                           
   413                           ;newmain.c: 160: }
   414                           ;newmain.c: 162: if (PORTDbits.RD3 && flag_botao_motor2){
   415  0000B2  B683               	btfsc	3971,3,c	;volatile
   416  0000B4  A415               	btfss	_flag_botao_motor2/(0+8),_flag_botao_motor2& (0+7),c
   417  0000B6  D002               	goto	l99
   418                           
   419                           ;newmain.c: 163: flag_botao_motor2 = 0;
   420  0000B8  9415               	bcf	_flag_botao_motor2/(0+8),_flag_botao_motor2& (0+7),c
   421  0000BA  D005               	goto	l832
   422  0000BC                     l99:
   423  0000BC  0E0A               	movlw	10
   424  0000BE  6418               	cpfsgt	_rep_motor_cnt2,c
   425  0000C0  D008               	goto	l101
   426                           
   427                           ;newmain.c: 166: rep_motor_cnt2 = 0;
   428  0000C2  0E00               	movlw	0
   429  0000C4  6E18               	movwf	_rep_motor_cnt2,c
   430  0000C6                     l832:
   431                           
   432                           ;newmain.c: 167: duty_motor = duty_motor + 80;
   433  0000C6  0E50               	movlw	80
   434  0000C8  241C               	addwf	_duty_motor,w,c
   435  0000CA  6E1C               	movwf	_duty_motor,c
   436  0000CC  0E00               	movlw	0
   437  0000CE  201D               	addwfc	_duty_motor+1,w,c
   438  0000D0  6E1D               	movwf	_duty_motor+1,c
   439  0000D2                     l101:
   440                           
   441                           ;newmain.c: 168: }
   442                           ;newmain.c: 170: if(duty_motor >= 64000) duty_motor = 64000;
   443  0000D2  0EFA               	movlw	250
   444  0000D4  5C1D               	subwf	_duty_motor+1,w,c
   445  0000D6  A0D8               	btfss	status,0,c
   446  0000D8  D004               	goto	l102
   447  0000DA  0EFA               	movlw	250
   448  0000DC  6E1D               	movwf	_duty_motor+1,c
   449  0000DE  0E00               	movlw	0
   450  0000E0  D009               	goto	L1
   451  0000E2                     l102:
   452                           
   453                           ;newmain.c: 171: else if (duty_motor < 59000) duty_motor = 59000;
   454  0000E2  0E78               	movlw	120
   455  0000E4  5C1C               	subwf	_duty_motor,w,c
   456  0000E6  0EE6               	movlw	230
   457  0000E8  581D               	subwfb	_duty_motor+1,w,c
   458  0000EA  B0D8               	btfsc	status,0,c
   459  0000EC  D004               	goto	l104
   460  0000EE  0EE6               	movlw	230
   461  0000F0  6E1D               	movwf	_duty_motor+1,c
   462  0000F2  0E78               	movlw	120
   463  0000F4                     L1:
   464  0000F4  6E1C               	movwf	_duty_motor,c
   465  0000F6                     l104:
   466                           
   467                           ;newmain.c: 174: if(!PORTDbits.RD4){
   468  0000F6  B883               	btfsc	3971,4,c	;volatile
   469  0000F8  D004               	goto	l105
   470                           
   471                           ;newmain.c: 175: flag_botao_servo1 = 0x01; rep_servo_cnt1 = 0;
   472  0000FA  8215               	bsf	_flag_botao_servo1/(0+8),_flag_botao_servo1& (0+7),c
   473  0000FC  0E00               	movlw	0
   474  0000FE  6E17               	movwf	_rep_servo_cnt1,c
   475                           
   476                           ;newmain.c: 176: } else rep_servo_cnt1++;
   477  000100  D001               	goto	l106
   478  000102                     l105:
   479  000102  2A17               	incf	_rep_servo_cnt1,f,c
   480  000104                     l106:
   481                           
   482                           ;newmain.c: 178: if(!PORTDbits.RD5){
   483  000104  BA83               	btfsc	3971,5,c	;volatile
   484  000106  D004               	goto	l107
   485                           
   486                           ;newmain.c: 179: flag_botao_servo2 = 0x01; rep_servo_cnt2 = 0;
   487  000108  8015               	bsf	_flag_botao_servo2/(0+8),_flag_botao_servo2& (0+7),c
   488  00010A  0E00               	movlw	0
   489  00010C  6E16               	movwf	_rep_servo_cnt2,c
   490                           
   491                           ;newmain.c: 180: } else rep_servo_cnt2++;
   492  00010E  D001               	goto	l108
   493  000110                     l107:
   494  000110  2A16               	incf	_rep_servo_cnt2,f,c
   495  000112                     l108:
   496                           
   497                           ;newmain.c: 182: if(PORTDbits.RD4 && flag_botao_servo1){
   498  000112  B883               	btfsc	3971,4,c	;volatile
   499  000114  A215               	btfss	_flag_botao_servo1/(0+8),_flag_botao_servo1& (0+7),c
   500  000116  D002               	goto	l109
   501                           
   502                           ;newmain.c: 183: flag_botao_servo1 = 0x00;
   503  000118  9215               	bcf	_flag_botao_servo1/(0+8),_flag_botao_servo1& (0+7),c
   504  00011A  D005               	goto	l870
   505  00011C                     l109:
   506  00011C  0E0A               	movlw	10
   507  00011E  6417               	cpfsgt	_rep_servo_cnt1,c
   508  000120  D008               	goto	l111
   509                           
   510                           ;newmain.c: 186: rep_servo_cnt1 = 0;
   511  000122  0E00               	movlw	0
   512  000124  6E17               	movwf	_rep_servo_cnt1,c
   513  000126                     l870:
   514                           
   515                           ;newmain.c: 187: duty_servo = duty_servo + 1;
   516  000126  0E01               	movlw	1
   517  000128  241A               	addwf	_duty_servo,w,c
   518  00012A  6E1A               	movwf	_duty_servo,c
   519  00012C  0E00               	movlw	0
   520  00012E  201B               	addwfc	_duty_servo+1,w,c
   521  000130  6E1B               	movwf	_duty_servo+1,c
   522  000132                     l111:
   523                           
   524                           ;newmain.c: 188: }
   525                           ;newmain.c: 190: if(PORTDbits.RD5 && flag_botao_servo2){
   526  000132  BA83               	btfsc	3971,5,c	;volatile
   527  000134  A015               	btfss	_flag_botao_servo2/(0+8),_flag_botao_servo2& (0+7),c
   528  000136  D002               	goto	l112
   529                           
   530                           ;newmain.c: 191: flag_botao_servo2 = 0x00;
   531  000138  9015               	bcf	_flag_botao_servo2/(0+8),_flag_botao_servo2& (0+7),c
   532  00013A  D005               	goto	l884
   533  00013C                     l112:
   534  00013C  0E0A               	movlw	10
   535  00013E  6416               	cpfsgt	_rep_servo_cnt2,c
   536  000140  D008               	goto	l114
   537                           
   538                           ;newmain.c: 194: rep_servo_cnt2 = 0;
   539  000142  0E00               	movlw	0
   540  000144  6E16               	movwf	_rep_servo_cnt2,c
   541  000146                     l884:
   542                           
   543                           ;newmain.c: 195: duty_servo = duty_servo - 1;
   544  000146  0EFF               	movlw	255
   545  000148  241A               	addwf	_duty_servo,w,c
   546  00014A  6E1A               	movwf	_duty_servo,c
   547  00014C  0EFF               	movlw	255
   548  00014E  201B               	addwfc	_duty_servo+1,w,c
   549  000150  6E1B               	movwf	_duty_servo+1,c
   550  000152                     l114:
   551                           
   552                           ;newmain.c: 196: }
   553                           ;newmain.c: 198: if(duty_servo > 40) duty_servo = 40;
   554  000152  501B               	movf	_duty_servo+1,w,c
   555  000154  E104               	bnz	u230
   556  000156  0E29               	movlw	41
   557  000158  5C1A               	subwf	_duty_servo,w,c
   558  00015A  A0D8               	btfss	status,0,c
   559  00015C  D004               	goto	l115
   560  00015E                     u230:
   561  00015E  0E00               	movlw	0
   562  000160  6E1B               	movwf	_duty_servo+1,c
   563  000162  0E28               	movlw	40
   564  000164  D009               	goto	L2
   565  000166                     l115:
   566                           
   567                           ;newmain.c: 199: else if (duty_servo < 10) duty_servo = 10;
   568  000166  501B               	movf	_duty_servo+1,w,c
   569  000168  E103               	bnz	u241
   570  00016A  0E0A               	movlw	10
   571  00016C  5C1A               	subwf	_duty_servo,w,c
   572  00016E  B0D8               	btfsc	status,0,c
   573  000170                     u241:
   574  000170  D777               	goto	l91
   575  000172  0E00               	movlw	0
   576  000174  6E1B               	movwf	_duty_servo+1,c
   577  000176  0E0A               	movlw	10
   578  000178                     L2:
   579  000178  6E1A               	movwf	_duty_servo,c
   580  00017A  D772               	goto	l91
   581  00017C                     __end_of_main:
   582                           	opt stack 0
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           intcon	equ	0xFF2
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           status	equ	0xFD8
   593                           
   594 ;; *************** function _isr *****************
   595 ;; Defined at:
   596 ;;		line 90 in file "newmain.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   610 ;;      Params:         0       0       0       0       0       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0       0       0       0       0
   612 ;;      Temps:         19       0       0       0       0       0       0       0       0
   613 ;;      Totals:        19       0       0       0       0       0       0       0       0
   614 ;;Total ram usage:       19 bytes
   615 ;; Hardware stack levels used:    1
   616 ;; This function calls:
   617 ;;		Nothing
   618 ;; This function is called by:
   619 ;;		Interrupt level 2
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           	psect	intcode
   624  000008                     __pintcode:
   625                           	opt stack 0
   626  000008                     _isr:
   627                           	opt stack 30
   628                           
   629                           ;incstack = 0
   630  000008  821E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   631  00000A  EDBE  F000         	call	int_func,f	;refresh shadow registers
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           intcon	equ	0xFF2
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           status	equ	0xFD8
   642                           
   643                           	psect	intcode_body
   644  00017C                     __pintcode_body:
   645                           	opt stack 30
   646  00017C                     int_func:
   647                           	opt stack 30
   648  00017C  0006               	pop		; remove dummy address from shadow register refresh
   649  00017E  CFFA F002          	movff	pclath,??_isr+1
   650  000182  CFFB F003          	movff	pclatu,??_isr+2
   651  000186  CFE9 F004          	movff	fsr0l,??_isr+3
   652  00018A  CFEA F005          	movff	fsr0h,??_isr+4
   653  00018E  CFE1 F006          	movff	fsr1l,??_isr+5
   654  000192  CFE2 F007          	movff	fsr1h,??_isr+6
   655  000196  CFD9 F008          	movff	fsr2l,??_isr+7
   656  00019A  CFDA F009          	movff	fsr2h,??_isr+8
   657  00019E  CFF3 F00A          	movff	prodl,??_isr+9
   658  0001A2  CFF4 F00B          	movff	prodh,??_isr+10
   659  0001A6  CFF6 F00C          	movff	tblptrl,??_isr+11
   660  0001AA  CFF7 F00D          	movff	tblptrh,??_isr+12
   661  0001AE  CFF8 F00E          	movff	tblptru,??_isr+13
   662  0001B2  CFF5 F00F          	movff	tablat,??_isr+14
   663  0001B6  C01E  F010         	movff	btemp,??_isr+15
   664  0001BA  C01F  F011         	movff	btemp+1,??_isr+16
   665  0001BE  C020  F012         	movff	btemp+2,??_isr+17
   666  0001C2  C021  F013         	movff	btemp+3,??_isr+18
   667                           
   668                           ;newmain.c: 92: if (TMR1IF){
   669  0001C6  A09E               	btfss	3998,0,c	;volatile
   670  0001C8  D006               	goto	i2l81
   671                           
   672                           ;newmain.c: 93: TMR1IF = 0;
   673  0001CA  909E               	bcf	3998,0,c	;volatile
   674                           
   675                           ;newmain.c: 94: TMR1 = 58000;
   676  0001CC  0EE2               	movlw	226
   677  0001CE  6ECF               	movwf	4047,c	;volatile
   678  0001D0  0E90               	movlw	144
   679  0001D2  6ECE               	movwf	4046,c	;volatile
   680                           
   681                           ;newmain.c: 95: PORTDbits.RD0 = 1;
   682  0001D4  8083               	bsf	3971,0,c	;volatile
   683  0001D6                     i2l81:
   684                           
   685                           ;newmain.c: 96: }
   686                           ;newmain.c: 98: if (CCP1IF){
   687  0001D6  A49E               	btfss	3998,2,c	;volatile
   688  0001D8  D002               	goto	i2l82
   689                           
   690                           ;newmain.c: 99: CCP1IF = 0;
   691  0001DA  949E               	bcf	3998,2,c	;volatile
   692                           
   693                           ;newmain.c: 100: PORTDbits.RD0 = 0;
   694  0001DC  9083               	bcf	3971,0,c	;volatile
   695  0001DE                     i2l82:
   696                           
   697                           ;newmain.c: 101: }
   698                           ;newmain.c: 103: if(TMR2IF){
   699  0001DE  A29E               	btfss	3998,1,c	;volatile
   700  0001E0  D011               	goto	i2l85
   701                           
   702                           ;newmain.c: 104: TMR2IF = 0x00;
   703  0001E2  929E               	bcf	3998,1,c	;volatile
   704                           
   705                           ;newmain.c: 105: if(!PORTDbits.RD1){
   706  0001E4  B283               	btfsc	3971,1,c	;volatile
   707  0001E6  D006               	goto	i2l84
   708                           
   709                           ;newmain.c: 106: PR2 = duty_servo;
   710  0001E8  C01A  FFCB         	movff	_duty_servo,4043	;volatile
   711                           
   712                           ;newmain.c: 107: TMR2 = 0;
   713  0001EC  0E00               	movlw	0
   714  0001EE  6ECC               	movwf	4044,c	;volatile
   715                           
   716                           ;newmain.c: 108: PORTDbits.RD1 = 0x01;
   717  0001F0  8283               	bsf	3971,1,c	;volatile
   718                           
   719                           ;newmain.c: 109: }else{
   720  0001F2  D008               	goto	i2l85
   721  0001F4                     i2l84:
   722                           
   723                           ;newmain.c: 110: PR2 = 255 - duty_servo;
   724  0001F4  501A               	movf	_duty_servo,w,c
   725  0001F6  0800               	sublw	0
   726  0001F8  6E01               	movwf	??_isr& (0+255),c
   727  0001FA  0401               	decf	??_isr,w,c
   728  0001FC  6ECB               	movwf	4043,c	;volatile
   729                           
   730                           ;newmain.c: 111: TMR2 = 0;
   731  0001FE  0E00               	movlw	0
   732  000200  6ECC               	movwf	4044,c	;volatile
   733                           
   734                           ;newmain.c: 112: PORTDbits.RD1 = 0x00;
   735  000202  9283               	bcf	3971,1,c	;volatile
   736  000204                     i2l85:
   737  000204  C013  F021         	movff	??_isr+18,btemp+3
   738  000208  C012  F020         	movff	??_isr+17,btemp+2
   739  00020C  C011  F01F         	movff	??_isr+16,btemp+1
   740  000210  C010  F01E         	movff	??_isr+15,btemp
   741  000214  C00F  FFF5         	movff	??_isr+14,tablat
   742  000218  C00E  FFF8         	movff	??_isr+13,tblptru
   743  00021C  C00D  FFF7         	movff	??_isr+12,tblptrh
   744  000220  C00C  FFF6         	movff	??_isr+11,tblptrl
   745  000224  C00B  FFF4         	movff	??_isr+10,prodh
   746  000228  C00A  FFF3         	movff	??_isr+9,prodl
   747  00022C  C009  FFDA         	movff	??_isr+8,fsr2h
   748  000230  C008  FFD9         	movff	??_isr+7,fsr2l
   749  000234  C007  FFE2         	movff	??_isr+6,fsr1h
   750  000238  C006  FFE1         	movff	??_isr+5,fsr1l
   751  00023C  C005  FFEA         	movff	??_isr+4,fsr0h
   752  000240  C004  FFE9         	movff	??_isr+3,fsr0l
   753  000244  C003  FFFB         	movff	??_isr+2,pclatu
   754  000248  C002  FFFA         	movff	??_isr+1,pclath
   755  00024C  921E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   756  00024E  0011               	retfie		f
   757  000250                     __end_of_isr:
   758                           	opt stack 0
   759  0000                     pclatu	equ	0xFFB
   760                           pclath	equ	0xFFA
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           prodh	equ	0xFF4
   766                           prodl	equ	0xFF3
   767                           intcon	equ	0xFF2
   768                           postinc0	equ	0xFEE
   769                           fsr0h	equ	0xFEA
   770                           fsr0l	equ	0xFE9
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1h	equ	0xFE2
   774                           fsr1l	equ	0xFE1
   775                           fsr2h	equ	0xFDA
   776                           fsr2l	equ	0xFD9
   777                           status	equ	0xFD8
   778                           pclatu	equ	0xFFB
   779                           pclath	equ	0xFFA
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           prodh	equ	0xFF4
   785                           prodl	equ	0xFF3
   786                           intcon	equ	0xFF2
   787                           postinc0	equ	0xFEE
   788                           fsr0h	equ	0xFEA
   789                           fsr0l	equ	0xFE9
   790                           wreg	equ	0xFE8
   791                           postdec1	equ	0xFE5
   792                           fsr1h	equ	0xFE2
   793                           fsr1l	equ	0xFE1
   794                           fsr2h	equ	0xFDA
   795                           fsr2l	equ	0xFD9
   796                           status	equ	0xFD8
   797                           
   798                           	psect	rparam
   799  0000                     pclatu	equ	0xFFB
   800                           pclath	equ	0xFFA
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           prodh	equ	0xFF4
   806                           prodl	equ	0xFF3
   807                           intcon	equ	0xFF2
   808                           postinc0	equ	0xFEE
   809                           fsr0h	equ	0xFEA
   810                           fsr0l	equ	0xFE9
   811                           wreg	equ	0xFE8
   812                           postdec1	equ	0xFE5
   813                           fsr1h	equ	0xFE2
   814                           fsr1l	equ	0xFE1
   815                           fsr2h	equ	0xFDA
   816                           fsr2l	equ	0xFD9
   817                           status	equ	0xFD8
   818                           
   819                           	psect	temp
   820  00001E                     btemp:
   821                           	opt stack 0
   822  00001E                     	ds	1
   823  0000                     int$flags	set	btemp
   824  0000                     wtemp6	set	btemp+1
   825                           pclatu	equ	0xFFB
   826                           pclath	equ	0xFFA
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           prodh	equ	0xFF4
   832                           prodl	equ	0xFF3
   833                           intcon	equ	0xFF2
   834                           postinc0	equ	0xFEE
   835                           fsr0h	equ	0xFEA
   836                           fsr0l	equ	0xFE9
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           fsr1h	equ	0xFE2
   840                           fsr1l	equ	0xFE1
   841                           fsr2h	equ	0xFDA
   842                           fsr2l	equ	0xFD9
   843                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     20      29
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     14      1D       1       30.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      20        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Aug 15 22:18:43 2017

                     l91 0060                       l92 0082                       l93 0084  
                     l94 0090                       l95 0092                       l96 009C  
                     l98 00B2                       l99 00BC              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l101 00D2                      l102 00E2  
                    l111 0132                      l112 013C                      l104 00F6  
                    l105 0102                      l114 0152                      l106 0104  
                    l115 0166                      l107 0110                      l108 0112  
                    l109 011C                      l832 00C6                      l818 00A6  
                    l870 0126                      l884 0146                      _GIE 007F97  
           __CFG_CPB$OFF 000000                      u230 015E                      u241 0170  
                    _PR2 000FCB                      u257 0066             __CFG_CPD$OFF 000000  
           __CFG_BOR$OFF 000000                      _isr 0008                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_isr 0001  
                   _PEIE 007F96                     i2l81 01D6                     i2l82 01DE  
                   i2l84 01F4                     i2l85 0204                     _TMR1 000FCE  
                   _TMR2 000FCC                     _main 0012                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 001E  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             ___param_bank 000000                    ??_isr 0001  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _CCPR1 000FBE                    _T1CON 000FCD                    _T2CON 000FCA  
                  _T3CON 000FB1                    _PORTC 000F82                    _PORTD 000F83  
          __CFG_USBDIV$1 000000                    _TRISC 000F94                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000           __pbitbssCOMRAM 00A8  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 001F           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
         __CFG_MCLRE$OFF 000000          __initialization 0250             __end_of_main 017C  
                 ??_main 0014            __activetblptr 000000                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _CCP1IE 007CEA  
                 _CCP1IF 007CF2                   _OSCCON 000FD3                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _TMR2IE 007CE9                   _TMR2IF 007CF1  
                 _TMR2ON 007E52           __CFG_XINST$OFF 000000             __pdataCOMRAM 001A  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 027A            ___rparam_used 000001  
         __pcstackCOMRAM 0001           _rep_motor_cnt1 0019           _rep_motor_cnt2 0018  
         _rep_servo_cnt1 0017           _rep_servo_cnt2 0016                  _CCP1CON 000FBD  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
        __CFG_STVREN$OFF 000000                  __pcinit 0250                  __ramtop 0800  
                __ptext0 0012             __size_of_isr 0248               _duty_motor 001C  
             _duty_servo 001A           __pintcode_body 017C     end_of_initialization 027A  
                int_func 017C                  postdec1 000FE5                  postinc0 000FEE  
              _PORTDbits 000F83        _flag_botao_motor1 00AB        _flag_botao_motor2 00AA  
      _flag_botao_servo1 00A9        _flag_botao_servo2 00A8            __pidataCOMRAM 0284  
    start_initialization 0250              __end_of_isr 0250         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0016                __pintcode 0008         __CFG_WDTPS$32768 000000  
             _ADCON0bits 000FC2                copy_data0 0264                 __Hrparam 0000  
               __Lrparam 0000            __size_of_main 016A                 int$flags 001E  
  __CFG_CPUDIV$OSC1_PLL2 000000                 intlevel2 0000      __CFG_FOSC$INTOSC_XT 000000  
